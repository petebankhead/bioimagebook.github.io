# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024
# This file is distributed under the same license as the bioimage-book package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: bioimage-book \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-29 16:56+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../chapters/2-processing/4-filters/imagej.md:15
msgid "ImageJ: Filters"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:36
msgid "Introduction"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:38
msgid "Most of the filters we've considered are available through the {menuselection}`Process --> Filters` submenu. This section adds a little more information about their implementation in ImageJ, and asks a few questions."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:41
msgid "Linear filters"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:43
msgid "Mean filters"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:45
msgid "The easiest way to apply a 3×3 mean filter in ImageJ is through the {menuselection}`Process --> Smooth` command. The fact that the shortcut is {kbd}`Shift+S` can almost make this *too* easy, as I find myself accidentally smoothing when I really wanted to save my image. Take care."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:49
msgid "To apply larger mean filters, the command is {menuselection}`Process --> Filters --> Mean...`. It uses approximately circular neighborhoods, and the neighborhood size is adjusted by choosing a {guilabel}`Radius` value. The {menuselection}`Process --> Filters --> Show Circular Masks` command displays the neighborhoods used for different values of {guilabel}`Radius`. If you happen to choose *Radius = 1*, you get a 3×3 filter -- and the same results as using {menuselection}`Smooth`."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:60
msgid "Gaussian filters"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:62
msgid "{menuselection}`Process --> Filters --> Gaussian Blur...` is the command that implements a Gaussian filter."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:64
msgid "In the event that you want a Gaussian filter that isn't isotropic (i.e. has a different size along different dimensions), {menuselection}`Process --> Filters --> Gaussian Blur 3D...` can be used."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:66
msgid "Although not *really* recommended, unsharp masking is available through {menuselection}`Process --> Filters --> Unsharp mask...`."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:68
msgid "Difference of Gaussians"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:69
msgid "There's currently no direct command in ImageJ to implement difference of Gaussians filtering, rather the steps need to be pieced together with image duplication and subtraction. However {ref}`chap_macro_dog` describes how to generate a macro for DoG filtering."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:73
msgid "Custom linear filters"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:75
msgid "{menuselection}`Process --> Filters --> Convolve...` makes it possible to define any custom linear filter by entering the values of the desired coefficients, separated by spaces and arranged in rows and columns. If you {guilabel}`Normalize Kernel` is selected, then the coefficients are scaled so that they add to 1, by dividing by the sum of all the coefficients -- unless the sum is 0, in which case requesting normalizion does nothing."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:0
msgid "Question"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:88
msgid "When defining an _n_×_n_ filter kernel with {menuselection}`Convolve...`, ImageJ insists that __n__ is an odd number. Why?"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:0
msgid "Answer"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:94
msgid "If *n* is an odd number, the filter has a clear central pixel. This makes it possible to center the filter kernel on a pixel on the image."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:112
msgid "Predict what happens when you convolve an image using a filter that consists of a single coefficient with a value -1 in the following cases:"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:114
msgid "{guilabel}`Normalize Kernel` is checked"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:115
msgid "You have a 32-bit image, {guilabel}`Normalize Kernel` is unchecked"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:116
msgid "You have an 8-bit image, {guilabel}`Normalize Kernel` is unchecked"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:121
msgid "The results of convolving with a single -1 coefficient in different circumstances:"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:122
msgid "_{guilabel}`Normalize Kernel` is checked_: Nothing at all happens. The normalization makes the filter just a single 1... and convolving with a single 1 leaves the image unchanged."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:123
msgid "_You have a 32-bit image ({guilabel}`Normalize Kernel` unchecked)_: The pixel values become negative, and the image looks inverted."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:124
msgid "_You have an 8-bit image ({guilabel}`Normalize Kernel` unchecked)_: The pixel values would become negative, but then cannot be stored in an 8-bit unsigned integer form. Therefore, all pixels simply become clipped to zero."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:0
msgid "Practical"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:135
msgid "Using any image, work out which of the methods for dealing with boundaries shown in {numref}`fig-filter_boundaries` is used by ImageJ's {menuselection}`Convolve...` command."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:137
msgid "**Note:** This requires a bit of creativity. It will certainly help to use an image with some variation at the image boundary. I used {menuselection}`File --> Open Samples --> Blobs`."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:141
#: ../../../chapters/2-processing/4-filters/imagej.md:187
#: ../../../chapters/2-processing/4-filters/imagej.md:246
msgid "[![launch ImageJ.JS](https://ij.imjoy.io/assets/badge/launch-imagej-js-badge.svg)](https://ij.imjoy.io?run=https://gist.github.com/petebankhead/cbbb6f210d173c8488247799efc3b970)"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:141
#: ../../../chapters/2-processing/4-filters/imagej.md:187
#: ../../../chapters/2-processing/4-filters/imagej.md:246
msgid "launch ImageJ.JS"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:0
msgid "Solution"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:148
msgid "Replication of boundary pixels is the default method used by {menuselection}`Process --> Filters --> Convolve...` in ImageJ (although other filtering plugins by different authors might use different methods)."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:150
msgid "My approach to test this involved using {menuselection}`Convolve...` with a filter that consisting of a 1 followed by a lot of zeros (e.g. `1 0 0 0 0 0 0 0 0 0 0 0 0...`). This basically shifts the image to the right, bringing whatever is outside the image boundary into view."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:167
msgid "Gradient magnitude"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:175
msgid "Practice using the commands we've met so far by determining the **gradient magnitude** of an image, as described [here](sec_filters_gradient)."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:177
msgid "You will need to use"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:178
msgid "{menuselection}`Image --> Duplicate...`"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:179
msgid "{menuselection}`Process --> Filters --> Convolve...`"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:180
msgid "{menuselection}`Process --> Image Calculator...`"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:181
msgid "Several commands in the {menuselection}`Process --> Math` submenu"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:182
msgid "Something else we've used before... possibly"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:184
msgid "If you need a sample image, you can use {menuselection}`File --> Open samples --> Blobs (25K)`. _(Be sure to pay attention to the bit-depth!)_"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:191
msgid "The process to calculate the gradient magnitude is:"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:193
msgid "Convert the image to 32-bit (if it isn't already 32-bit)"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:194
msgid "Duplicate the image"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:195
msgid "Convolve one copy of the image with the horizontal gradient filter, and one with the vertical (i.e. coefficients `-1 0 1` arranged as a row or column)"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:196
msgid "Compute the square of both images ({menuselection}`Process --> Math --> Square`)"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:197
msgid "Use the image calculator to add the images together"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:198
msgid "Compute the square root of the resulting image ({menuselection}`Process --> Math --> Square Root`)"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:200
msgid "Here's a macro that implements these steps:"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:219
msgid "The convolution results in negative values, which is why the 32-bit conversion is needed."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:221
msgid "**Note:** This is (almost) what is done by the command {menuselection}`Process --> Find Edges`, except the gradient filters are slightly different."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:232
msgid "The 'Edges' LUT"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:240
msgid "ImageJ has a LUT called **edges** under {menuselection}`Image --> Lookup Tables --> Edges`. Applied to {menuselection}`File --> Open samples --> Blobs (25K)`, it does a rather good job of highlighting edges -- without actually changing the pixels at all."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:243
msgid "How does it work? Does it apply a filter?"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:251
msgid "The {menuselection}`edges` LUT shows most low and high pixel values as black -- and uses lighter shades of gray only for a small range of values in between (see {menuselection}`Image --> Color --> Edit LUT...`). In any image with a good separation of background and foreground pixels, but which still has a somewhat smooth transition between them, this means everything but the edges can appear black."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:254
msgid "All this is achieved by a LUT: no pixels were harmed, there was no filtering applied."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:262
msgid "Nonlinear filters"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:264
msgid "Rank filters"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:266
msgid "The main rank filters are to be found exactly where you might expect them:"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:268
msgid "{menuselection}`Process --> Filters --> Median...`"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:269
msgid "{menuselection}`Process --> Filters --> Minimum...`"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:270
msgid "{menuselection}`Process --> Filters --> Maximum...`"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:272
msgid "ImageJ uses circular neighborhoods with its built-in rank filters, similar to how mean filters are implemented. We will meet these filters again in {ref}`chap_morph`."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:276
msgid "Removing outliers"
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:278
msgid "{numref}`fig-processing_filters_speckled` shows that median filtering is much better than mean filtering for removing outliers. We might encounter this if something in the microscope is not quite functioning as expected or if dark noise is a problem, but otherwise we expect the noise in fluorescence microscopy images to produce few really extreme values (see {ref}`chap_formation_noise`)."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:281
msgid "Nevertheless, {menuselection}`Process --> Noise --> Remove Outliers...` provides an alternative if isolated bright values are present. This is a nonlinear filter that inserts median values _only whenever a pixel is found that is further away from the local median than some adjustable threshold_."
msgstr ""

#: ../../../chapters/2-processing/4-filters/imagej.md:284
msgid "It's therefore like a more selective median filter that will only modify the image at pixels where it is considered really necessary."
msgstr ""
